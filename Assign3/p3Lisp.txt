;;; +=
;;;Parameters:
;;;      numericVariable: Variable to be incremented
;;;      incrementValue: Numeric value added to numericVariable
;;;Purpose:
;;;      += is a macro which is passed a variable which is incremented, then assigned the new value.
;;;      The function value returned by += is the new value of numericVariable.

(defmacro += (numericVariable incrementValue)
    (list 'setf numericVariable `(+,numericVariable,incrementValue)) )
    
;;;iterate
;;;Parameters:
;;;      controlVariable: Variable to be counted
;;;      beginValueExpr: Expression from which count begins
;;;      endValueExpr: Expression at which count ends, inclusive
;;;      incrExpr: Expression by which count increments
;;;      bodyexpr1-N: Body expression evaluated during each iteration
;;;      endValue: Intermediate variable for endValueExpr which is generated by gensym
;;;      incValue: Intermediate variable for incrExpr which is generated by gensym
;;;Purpose:
;;;      iterate is a macro which is passed a variable which incremented from a starting value to an end value.
;;;      The variable is incremented by a specified amount for each iteration, with a body expression being
;;;      evaluated in each iteration

(defmacro iterate (controlVariable beginValueExpr endValueExpr incrExpr &rest bodyexprs)
     (let ((endValue (gensym))  
           (incValue (gensym)) )
          `(do ((endValue ,endValueExpr) (incValue ,incrExpr) ( ,controlVariable, beginValueExpr (+= ,controlVariable incValue))  )
               ((> ,controlVariable endValue)      T)
               ,@ bodyexprs)
     )
)
